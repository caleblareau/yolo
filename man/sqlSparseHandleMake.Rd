% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/constructor.R
\docType{methods}
\name{sqlSparseHandleMake}
\alias{sqlSparseHandleMake}
\alias{sqlSparseHandleMake,ANY,ANY,character-method}
\title{Create a \code{sqlSparseHandle} object}
\usage{
sqlSparseHandleMake(rowData, colData, sqlfile, lookupTableName = "data")

\S4method{sqlSparseHandleMake}{ANY,ANY,character}(rowData, colData, sqlfile,
  lookupTableName = "data")
}
\arguments{
\item{rowData}{A \code{GRanges} object or something that can be coerced into one.
Type checking is performed in the call to \code{RangedSummarizedExperiment}}

\item{colData}{A data frame of sample annotations}

\item{sqlfile}{String pointing to the sql file}

\item{lookupTableName}{= "data" Name of data table in sql file}
}
\value{
Returns a \code{sqlSparseHandle} object.
}
\description{
\code{sqlSparseHandleMake} takes the three parameters specified below
and creates a \code{sqlSparseHandle} object which can be subset and
manipulated without reading any data off the disk.
}
\details{
A series of QC measures will be called when running this function. 
First, the rowData input must be either be a \code{GRanges} 
object or something than can be coerced into one (e.g. data frame or file).
The length of the rowData input after coercion must be equal to the maximum
index of the row in the sql data table.

Next, the colData length must be equal to the maximum index of the column
in the sql data after coercion to a data.frame.

These maximums will be pulled on constuction, which ensures that the table
name, by default is 'data' exists in the sql file.

The sparse format suggests that there are three columns
in the sql table being referenced; two of which contain
'row' and 'column' as labels that indicate the index of 
the row and column elements.
}
\examples{
library(GenomicRanges)
nm <- c("chr", "start", "stop")
rt <- read.table(system.file("extdata", "dat1_row.bed", package = "yolo"))
rowData <- GRanges(setNames(rt, nm))
colData <- read.table(system.file("extdata", "dat1_col.txt", package = "yolo"))
sqlf <- system.file("extdata", "dat1.sqlite", package="yolo")
d1 <- sqlSparseHandleMake(rowData, colData, sqlfile=sqlf)

}

